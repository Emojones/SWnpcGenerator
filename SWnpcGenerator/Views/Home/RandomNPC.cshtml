@model SWnpcGenerator.Models.RandomNPC

@{
    ViewBag.Title = "RandomNPC";
    
}

<div class="container body-content">
    <h2>Look at this one!</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
           @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="row">
            <div class="nameSpecies">               
                <div class="form-group col-md-2">  
                    @Html.LabelFor(model => model.RandomName, htmlAttributes: new { @class = "control-label" })                 
                    <div class="col-md-10">
                        @Html.EditorFor(Model => Model.RandomName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(Model => Model.RandomName, "", new { @class = "text-danger" })
                    </div>
                </div>
                

                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.Species.SpeciesName, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Species.SpeciesName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Species.SpeciesName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
                </div>


            <div class="row">
                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.Species.WoundThreshold, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Species.WoundThreshold, new { htmlAttributes = new { @class = "form-control"} })
                        @Html.ValidationMessageFor(model => model.Species.WoundThreshold, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.Species.StrainThreshold, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Species.StrainThreshold, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Species.StrainThreshold, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-2">
                    @Html.LabelFor(model => model.Species.StartExp, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Species.StartExp, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Species.StartExp, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

                <div class="row">
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Brawn, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Brawn, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Brawn, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Agility, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Agility, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Agility, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Intellect, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Intellect, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Intellect, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Cunning, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Cunning, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Cunning, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Willpower, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Willpower, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Willpower, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Species.Presence, htmlAttributes: new { @class = "control-labelS" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Species.Presence, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Species.Presence, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                
                <div class="panel panel-info">
                    <div class="panel-heading">Quirks</div>
                    <ul class="list-group"> 
                           <!-- TODO: quirks are getting cut off, same quirk is getting passed all threetimes.-->                    
                        @for(var i = 0; i < 3; i++){
                        <li>@Html.EditorFor(model => model.Quirk.QuirkList, new { htmlAttributes = new { @class = "list-group-item" } })</li>
                          }           
                    </ul>
                </div>


                <div class="form-group row buttons">
                    <input type="submit" value="Save this one!" class="btn btn-primary btn-lg pull-left col-lg-2 col-xs-12" aria-label="Left Align" />

                    <button type="button" class="btn btn-danger btn-lg col-md-4 pull-right col-lg-3 col-xs-12" aria-label="Left Align"
                            value="Refresh Page" onClick="window.location.reload()">
                        <span class="glyphicon glyphicon-screenshot" aria-hidden="true"></span>
                        Find someone else...
                    </button>
                </div>
            </div>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
    </div>